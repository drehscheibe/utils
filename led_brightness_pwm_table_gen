#!/bin/bash

SELF=${0##*/}
TABLE_NAME=led_pwm_table
CMDLINE="$SELF $*"

NUM=8
INDENT=$'\t'

usage() {
	cat <<-EOF
	$SELF - a script for generating LED brigthness -> duty cycle tables

	Usage: $SELF -c [-i<indent>] [-n<num-coeff>] <steps> <resolution>
	    -c, --ctable       c mode: output table in c syntax
	    -i, --indent       indent to use for c mode (default: tab)
	    -n, --number       number of coeefficients per line in c mode (default: $NUM)
	    -h, --help         show this help screen
	    -l, --low-active   GPIO is low active

	    steps         number of table entries (e.g. 256)
	    resolution    PWM resolution (e.g 10000)

	See Weber-Fechner law for brightness perception.
	EOF
}

err() { [ -t 2 ] && echo -e "\033[31mError: $@\033[m" || echo "Error: $@"; } >&2
warn() { [ -t 2 ] && echo -e "\033[93mWarning: $@\033[m" || echo "$@"; } >&2
info() { [ -t 2 ] && echo -e "\033[32m$@\033[m" || echo "$@"; } >&2
log() { [ -t 2 ] && echo -e "\033[33m$@\033[m" || echo "$@"; } >&2
abort() { err "$@"; exit 1; }


args=$(getopt -l ctable,help,low-active,number -o chln: -- "$@")
if [ $? -ne 0 ]; then
	usage
	exit 1
fi

lowactive=false
eval set -- "$args"
while [ $# -gt 0 ]; do
	case "$1" in
	-c|--ctable)
		mode=c
		;;

	-h|--help)
		usage
		exit 0
		;;

	-i|--indent)
		INDENT=$2
		shift
		;;

	-l|--low-active)
		lowactive=true
		;;

	-n|--number)
		NUM=$2
		shift
		;;

	--)
		shift
		break
		;;

	*)
		if [ "$1" ]; then
			err "Invalid option: $1"
			usage
			exit 1
		fi
		;;
	esac
	shift
done

if [ $# -ne 2 ]; then
	usage
	exit 2
fi


steps=$1
[ $1 -lt 2 ] && abort "there must at least be two steps"

resolution=$2
scale=${3:-20}


if [ "$mode" == c ]; then
	if [ $resolution -ge $((1 << 16)) ]; then
		datatype=uint32_t
	elif [ $resolution -ge $((1 << 8)) ]; then
		datatype=uint16_t
	else
		datatype=uint8_t
	fi

	echo "#define LED_MAX_BRIGHTNESS $((steps - 1))"
	echo
	echo "// generated by  \$ $CMDLINE"
	echo "static const $datatype $TABLE_NAME[LED_MAX_BRIGHTNESS + 1] = {"
fi

((steps--)) # 0 is also a step
for i in $(seq 0 $steps); do
	if [ $i -eq 0 ]; then
		val=0
	else
		val=$(
			bc --mathlib <<-EOF
				scale=$scale
				define pow(a, b) {
					return e(b * l(a));
				}
				f=pow($resolution, $i / $steps)
				i(f + 0.5)
			EOF
		)
	fi

	$lowactive && val=$((resolution - val))

	if [ "$mode" == c ]; then
		pos=$((i % NUM))
		#echo -n "<$pos>"
		[ $pos -eq 0 ] && echo -en "$INDENT"

		if [ $pos -lt $((NUM - 1)) ] && [ $i -ne $steps ]; then
			echo -n "$val, "
		else
			echo "$val,"
		fi
	else
		echo "$val"
	fi
done

if [ "$mode" == c ]; then
	echo "};"
fi
